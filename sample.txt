1s.py,1c.py --> Create a basic client server using sockets.

2,9.py --> Write a program where two processes share a memory segment. The first process should write data into the shared memory, and the second process should read and display the data.

3.py --> Write a program to create two processes that communicate using a message queue. The first process should send a message to the queue, and the second process should receive and display it.

4,10s.py|4,10c.py --> Write a socket-based program for a simple chat system where multiple clients can send messages to a single server, and the server broadcasts the messages to all clients.

5s.py,5c.py --> Write a client-server program to send a text file from the client to the server using sockets. The server should save the file locally.

6c.c --> Implement a C program using pipes to enable bidirectional communication between a parent and child process. The parent should send a message, which the child reads and responds to, and then the parent should display the child's response.

7s.py,7c.py --> Write a basic client-server program using sockets to simulate an RPC. The client sends a function call request, and the server executes the function and returns the result.

8user.py,8.py --> Write a program to demonstrate two processes writing and reading data from a shared memory segment. Mainly use 8user.py
